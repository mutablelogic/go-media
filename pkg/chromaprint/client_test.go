package chromaprint_test

import (
	"context"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"

	// Namespace imports
	. "github.com/mutablelogic/go-media/pkg/chromaprint"
)

// Run tests setting your API KEY using environment variable
// CHROMAPRINT_KEY=
// or else tests are skipped

const (
	SAMPLE_001_DURATION    = 641 * time.Second
	SAMPLE_001_FINGERPRINT = "AQABz0qUkZK4oOfhL-CPc4e5C_wW2H2QH9uDL4cvoT8UNQ-eHtsE8cceeFJx-LiiHT-aPzhxoc-Opj_eI5d2hOFyMJRzfDk-QSsu7fBxqZDMHcfxPfDIoPWxv9C1o3yg44d_3Df2GJaUQeeR-cb2HfaPNsdxHj2PJnpwPMN3aPcEMzd-_MeB_Ej4D_CLP8ghHjkJv_jh_UDuQ8xnILwunPg6hF2R8HgzvLhxHVYP_ziJX0eKPnIE1UePMByDJyg7wz_6yELsB8n4oDmDa0Gv40hf6D3CE3_wH6HFaxCPUD9-hNeF5MfWEP3SCGym4-SxnXiGs0mRjEXD6fgl4LmKWrSChzzC33ge9PB3otyJMk-IVC6R8MTNwD9qKQ_CC8kPv4THzEGZS8GPI3x0iGVUxC1hRSizC5VzoamYDi-uR7iKPhGSI82PkiWeB_eHijvsaIWfBCWH5AjjCfVxZ1TQ3CvCTclGnEMfHbnZFA8pjD6KXwd__Cn-Y8e_I9cq6CR-4S9KLXqQcsxxoWh3eMxiHI6TIzyPv0M43YHz4yte-Cv-4D16Hv9F9C9SPUdyGtZRHV-OHEeeGD--BKcjVLOK_NCDXMfx44dzHEiOZ0Z44Rf6DH5R3uiPj4d_PKolJNyRJzyu4_CTD2WOvzjKH9GPb4cUP1Av9EuQd8fGCFee4JlRHi18xQh96NLxkCgfWFKOH6WGeoe4I3za4c5hTscTPEZTES1x8kE-9MQPjT8a8gh5fPgQZtqCFj9MDvp6fDx6NCd07bjx7MLR9AhtnFnQ70GjOcV0opmm4zpY3SOa7HiwdTtyHa6NC4e-HN-OfC5-OP_gLe2QDxfUCz_0w9l65HiPAz9-IaGOUA7-4MZ5CWFOlIfe4yUa6AiZGxf6w0fFxsjTOdC6Itbh4mGD63iPH9-RFy909XAMj7mC5_BvlDyO6kGTZKJxHUd4NDwuZUffw_5RMsde5CWkJAgXnDReNEaP6DTOQ65yaD88HoeX8fge-DSeHo9Qa8cTHc80I-_RoHxx_UHeBxrJw62Q34Kd7MEfpCcu6BLeB1ePw6OO4sOF_sHhmB504WWDZiEu8sKPpkcfCT9xfej0o0lr4T5yNJeOvjmu40w-TDmqHXmYgfFhFy_M7tD1o0cO_B2ms2j-ACEEQgQgAIwzTgAGmBIKIImNQAABwgQATAlhDGCCEIGIIM4BaBgwQBogEBIOESEIA8ARI5xAhxEFmAGAMCKAURKQQpQzRAAkCCBQEAKkQYIYIQQxCixCDADCABMAE0gpJIgyxhEDiCKCCIGAEIgJIQByAhFgGACCACMRQEyBAoxQiHiCBCFOECQFAIgAABR2QAgFjCDMA0AUMIoAIMChQghChASGEGeYEAIAIhgBSErnJPPEGWYAMgw05AhiiGHiBBBGGSCQcQgwRYJwhDDhgCSCSSEIQYwILoyAjAIigBFEUQK8gAYAQ5BCAAjkjCCAEEMZAUQAZQCjCCkpCgFMCCiIcVIAZZgilAQAiSHQECOcQAQIc4QClAHAjDDGkAGAMUoBgyhihgEChFCAAWEIEYwIJYwViAAlHCBIGEIEAEIQAoBwwgwiEBAEEEOoEwBY4wRwxAhBgAcKAESIQAwwIowRFhoBhAE"
	//	SAMPLE_002_DURATION    = 15 * time.Second
	//	SAMPLE_002_FINGERPRINT = "AQAAZMmShFmSJFSEHO-O6_ARcoc-5NrRB67RvMepI1KyXOihE21KpIc95UJlCV1TEf-RH43T4RFkDU32Izx6esiJW0ctBl8EzVSQRj3OBs8Djyd-pI5R7_gEfWLQKMKnHN-OD_XBPAzRVIk-_IfWSULTnXjPgSYdBP7wDXkUaMmOcA9K5pjyGl0zwl_QG6EO7Rly41taPMuOSVd2NLWR04J-IXyGl0XTTxmeHOfw5ciZQ1WmC_mUoz8ep2iMOctRHj7RPMgF_Qifw6obOD8-Sim8XaikPUF3IzYPSQCigBElEADCAIKwMABA4gDDQhBhiGCGUUEMIgYBA4EQAgAAlFKQMACYUAIIIAgDThCgBGJIEACQIhRAhAxgCiGBkKAE"
	SAMPLE_003_DURATION    = 230 * time.Second
	SAMPLE_003_FINGERPRINT = "AQADtJmSiN0U4Q6mjEN-Cf5Q5HzwGdKHUON6vLiYqziDh0j74yeuCdnz4fmF4-UxS1mFf0gVqDz8RA9yZRdeH9jzBIG7H9KPXqnw8bhRbcRD8EYdCX0uRJeMX2iu4zueIMzxfZCrC2kc5fCPYz_6G_1B3SwqxugcFVNyJHmOnMN38FFxdUOfnPCPo8ceh0ZyhTzS469Q7cPazDiynMGn43swKdCJV8F3ND1y5cFP_Ef1w1R9_MKHzsd95DuUO8XBN6isYxN-QWx0XEZ-9MvxD42PeqOE3AqqG6J8nGKOWSkXlBny46QGKj--JBEu7aCWHf8K_grS-Aqeo5kgZcmzIy8Oiwt4ScaZBz1hEo1wFx8-uEsSnPgzqcizC82kC3UOVcdz9D5SqUYWXA_-QV-Ofse5IBd-wdISGV8Y9MjxQvuPMC7IHMd7ND5uOHQRLkxWoacSaImYIWxkodkafDiYE79gZYpR94j_48KP-9CVaEPdIwyZHT_OHL0SoXGOH3_APEGYfNC7I1dm4Xs0XAGTkUH748KH8A00PQgHR2MytGPBMlci4UaYpzaSfR_6o3ny4KSMXiH8HT0uJD9i5-hy-MyEagv-TMMzJ0iPRF0YfFFMMB-aSvLx42KO8NCibaIRX8bn4x-uLD2aos-FXDj-Q7uOM-OC-7CaHfma4VuO8_AVHL4ER-TxXXiYw26MXjl62DvOI80B8cUHe6h1oUfz1fiPH3eLPkcYJseJa9zBILyGTwmhKrODMNsldP6GSmoSguKPM0eYH9Jp5Fk2FP5w8tg-Gy6R9xCZfQjp-fjxadHgpil-4eiKMF846KKR58OP9MdL6DvxJDWMy9CzC9dz5Nj4WPiRZ4GUdEe4OxquHO9wEm7wXkKZXfBzIjQVPNlRUTukJDlOPcGjLMeVZLiO8kGY58MuXPCzDFeC6znCPDySSdmPoqmDJzMu5Xjy4TwafohEBnrC9PhAjcyGB0-Sj7jDHZKeQw8-B_mc5riSw_ky_IgLM6IP2eoc5NKKH_3x7CnMiEflXMHxiNGFcgqaIke7zAmaMzd0HWeEnGiOPphvPHuQi5kUaAmj4Q9yHiWFV8Wjp_gV5Fl2aGQR5sKXhLh8_OngkU6OT0eeELpS-BeuLMGha-GwnYWe4Ed4NIlZ_A-y54eWb0f4SC7K6Ck8PnCVPOgRiloyiGMQTsLDPHhIKXgTUMIb5NOgjMiV_Wgs9MQf5E126PwQwmEYEpeYwlzkBCVx9OUQKVGS7ArkSDm0XAif4xQ-V2iYo8eFI3-gbbzQpPWQ_UT_4KiPF28kIoycQHvO4MfJI9_xDP5AHGEiPsXERBn0Hc2vozre41agLz-OPAtyGm0OC3pjbNDn4cPxFzqc48d_-DnEe6iHHz_4C_WOJpZ1qNEYoV8PJr9wQd-JR8ir4WWIRuPxpzDHIfyHh4Tm5IKrH_2LvjihiceVMNMmPBseoXmOXgp4E49b6BOOGn6GPsyIfmjqFD96-MzwDPJx4Rn-Fz-mE_ehC9eO_MGUU-gvfKOEBp2WtXhQ0RTC3EiegyePx8Fz4TPhnMcnHLHmSEGtwz_6Dvl8_MeD08NFPBlOfMzRfPjhRoerRBbCC0l4oQ-sEM-T46LReTn6D1aOSD6meILmsbiGR_Ae4-GH5kedhogp4jkKF6E04cyNi8ePP9ih69Cu_GgmKclxZrgY9HQSNFQSSzgugpGzTPDBkoemBzN1I8-HR3LRWcGXBp5oIbyWQzdC-EPfDhedIzoO7Tny9HCFHj19-Dm-XCuaJkOiqUGWqA2FnsNT8DxOhUb5g8kj4ttx3oh-yBNTXEO-C9WF7bpQXJQQpjlqPcMPrSSYnMd9jI4EWaMlNPlR9sF1NE1jlFmG_9By1MoRayGLVeEPR0xFfMLV4wqYuMQfBmmlH-Yy9EW-zXhMnEmKa6iORk_xH1mfo41owc8R1sEV_ENjhIrGEJc2DpcC8Zl4XDqu5sSVUcJZIb2CL7jkAo0nSijJoJoSHame49eh40fJ4wrCwz8-HlS08LDUC5eUCn3Qp4N_XISd4A78zDiRB46oG8ym5MWPPyE0KxqaUT6C41JoXC7KHg7R57h25KugTZGONE5atD_KM3hk_Hhy5BfEkSqydNlRPsSOK8hziPMRPkFPoQmVKHhaFQ-6f9izjAijkJDBKngO8Tke5PqCJ9vh40Z26KIQUycc8_iOa0gvWeCJh5AZwcclZRae8QnC_KiV4BSOJjy6-MGVKMuRTyzx6bgO8SGRlccXHj-xVTye5EN86IlS4StyPBsjXDn6C1cW5Dy0vMeT5EdEGj-JMNIeod6l4wkOH88R-Vhnojl6CTnEZUMeJgp-_OiP5nvwPXjE4z2OR8smNGmGNjzQM83RhMqOH59e5IOWa-iFvDr-G3-wx0WYH21_6BUu5tgnHhqTI-RjVDeYPMEnXHHx8fB6Kci1H8mL2imaZRHOGzwOa0eeQz_CPIuDXgYqanjxgkwu5HoS-BHEB3mW4RL6B58uPMT1wWmGR4mM53CO7NASHaH1YXKa4iamJ8dL5EmTQ1-b4DsiPTp-RPsObUkiXHyCw3F26DGJXDyKZg8-HscvNBN1Ixz9Qv-E8Hnwo1ZwxsH3I8yTFFrHIDvT4zx-oTnRHzwAYBQVyDkjAGAMAKWIEQYAsBBADAgCjCCEEGYMAIIBYYwlFCCAJBCCEIMIEYYYZA0gDAAkhBJyC0IsQ4JMIxAxxkFkCHCCEAQIEAwAQoWQHCEFgBAEIKWEJUAwxBAQRAogjDDICsMQIEQBpJgBChhDnECEMCiAIs54IQmRlhghgRHEMAccMwIQwoikAADHFBPSAC8IEcgYghBgxAEAKBCGASCYERBgZJAARDBgJDEKEGyIYAQBAZQ0wAhBABMCSGIIE8IIoQjUhEijnEEEACUoEAZRQgRCAECCACOKEiGQEgIAQYQZxBADEREEGIaYAEACZAEgEAhACAJECQIJMIIwBIAwHBDCABAGKCSYIEoQIEQSCBiGGAAGAaaEAUYIJgQAQ3kgiAKSGMGAIYJYhAwUggFBhAEAEcMAAoQIZIEAQghBDCHMACWIQoQaAQRiQAFDnAAGCgAI1A5AAQESxAIGlDCCAKCogMcIQYBkSABhGFEAKScc4sBoxIAwykjrGHCAECAQEE4BRARxAhnghMKMMA2MAIo4AAgAAjDIkAEAAYKAQAAIJhCyDClijEIOACOkIIIBwoxoECEjBHEGCYEQQIIoyaWTRADECALCQAmMIwIIoAgSABlAjEHGAUGEQAIpYgCSQgADjGJEACKEEQAqoQwRwkFFqFAECuEUccwAhABhjCAiiGDMKGIIAEgIYKADgAFClBGIEUMAEUAIZQBCFlAEiABKKIcQYFIgD4AxoBhAIJJCAEAYAwwpA4VBxhgkkEfAGAUMOcI4MTRThCARjISAAGCUUwIAhBwTSBlFCETAIEYSMsIAwQBAQBBhAECWOgmBMAAxYIAVgDDjiAFCCCGUE4oBBCRAADmBgBAAAUIUNEAQA4AhwBCEmEOIGGAAYcYAJAhAQjCCDAWQgAGE4QIARARhjAACwCBGMGCIBAQQIAxjTAkAiACMGUWoBQ"
	SAMPLE_004_FILE        = "../../etc/test/sample.mp4"
)

////////////////////////////////////////////////////////////////////////////////
// TESTS

func GetKey(t *testing.T) string {
	key := os.Getenv("CHROMAPRINT_KEY")
	if key == "" {
		t.Skip("No API key set, set using environment variable CHROMAPRINT_KEY")
	}
	return key
}

func Test_client_001(t *testing.T) {
	assert := assert.New(t)
	client, err := NewClient(GetKey(t))
	if !assert.NoError(err) {
		t.SkipNow()
	}
	if client == nil {
		t.Fatal("Failed to create client")
	} else {
		t.Log(client)
	}
}

func Test_client_002(t *testing.T) {
	assert := assert.New(t)
	client, err := NewClient(GetKey(t))
	if !assert.NoError(err) {
		t.SkipNow()
	}
	matches, err := client.Lookup("AQAAT0mUaEkSRZEGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 5*time.Second, META_TRACK)
	assert.NoError(err)
	t.Log(matches)
}

func Test_client_003(t *testing.T) {
	assert := assert.New(t)
	client, err := NewClient(GetKey(t))
	if !assert.NoError(err) {
		t.SkipNow()
	}

	matches, err := client.Lookup(SAMPLE_001_FINGERPRINT, SAMPLE_001_DURATION, META_ALL)
	if !assert.NoError(err) {
		t.SkipNow()
	}
	t.Log(matches)
}

func Test_client_004(t *testing.T) {
	assert := assert.New(t)
	client, err := NewClient(GetKey(t))
	if !assert.NoError(err) {
		t.SkipNow()
	}

	// Open the file
	r, err := os.Open(SAMPLE_004_FILE)
	if !assert.NoError(err) {
		t.SkipNow()
	}
	defer r.Close()

	matches, err := client.Match(context.Background(), r)
	assert.NoError(err)
	t.Log(matches)
}
